// Generated by Qodo Gen

describe('maxAdjacentDiff', () => {

    // Returns the maximum absolute difference between adjacent elements in a normal array
    it('should return the maximum absolute difference between adjacent elements in a mixed array', () => {
      const arr = [10, 5, 15, 8, 20];
      const result = maxAdjacentDiff(arr);
      expect(result).toBe(12);
    });

    // Handles arrays with positive numbers correctly
    it('should correctly calculate max difference with all positive numbers', () => {
      const arr = [2, 4, 8, 15, 16];
      const result = maxAdjacentDiff(arr);
      expect(result).toBe(7);
    });

    // Returns 0 when input is not an array
    it('should return 0 when input is not an array', () => {
      expect(maxAdjacentDiff(null)).toBe(0);
      expect(maxAdjacentDiff(undefined)).toBe(0);
      expect(maxAdjacentDiff(42)).toBe(0);
      expect(maxAdjacentDiff('string')).toBe(0);
      expect(maxAdjacentDiff({})).toBe(0);
    });

    // Returns 0 when array has fewer than 2 elements
    it('should return 0 when array has fewer than 2 elements', () => {
      expect(maxAdjacentDiff([])).toBe(0);
      expect(maxAdjacentDiff([5])).toBe(0);
    });

    // Handles arrays with exactly 2 elements correctly
    it('should calculate difference correctly for arrays with exactly 2 elements', () => {
      expect(maxAdjacentDiff([5, 10])).toBe(5);
      expect(maxAdjacentDiff([10, 5])).toBe(5);
      expect(maxAdjacentDiff([7, 7])).toBe(0);
    });
});
