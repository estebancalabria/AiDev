// Generated by Qodo Gen

describe('esPrimo', () => {

    // Test with prime numbers (e.g. 2, 3, 5, 7, 11, 13)
    it('should return true for prime numbers', () => {
      const primeNumbers = [3, 5, 7, 11, 13];
  
      primeNumbers.forEach(num => {
        expect(esPrimo(num)).toBe(true);
      });
    });

    // Test with number 2 (smallest prime number)
    it('should return true for number 2 as smallest prime', () => {
      expect(esPrimo(2)).toBe(true);
    });

    // Test with non-prime numbers (e.g. 4, 6, 8, 9, 10, 12)
    it('should return false for non-prime numbers', () => {
      const nonPrimeNumbers = [4, 6, 8, 9, 10, 12];

      nonPrimeNumbers.forEach(num => {
        expect(esPrimo(num)).toBe(false);
      });
    });

    // Test with large prime numbers (e.g. 997, 1009)
    it('should return true for large prime numbers', () => {
      const largePrimeNumbers = [997, 1009];

      largePrimeNumbers.forEach(num => {
        expect(esPrimo(num)).toBe(true);
      });
    });

    // Test with perfect squares (e.g. 4, 9, 16, 25)
    it('should return false for perfect square numbers', () => {
      const perfectSquares = [4, 9, 16, 25];

      perfectSquares.forEach(num => {
        expect(esPrimo(num)).toBe(false);
      });
    });

    // Test with number 1 (by definition not prime)
    it('should return false when the number is 1', () => {
      expect(esPrimo(1)).toBe(false);
    });

    // Test with 0 and negative numbers
    it('should return false for 0 and negative numbers', () => {
      expect(esPrimo(0)).toBe(false);
      expect(esPrimo(-5)).toBe(false);
      expect(esPrimo(-10)).toBe(false);
    });

    // Test with a string input to verify it returns false
    it('should return false for string input', () => {
      expect(esPrimo("test")).toBe(false);
      expect(esPrimo("123")).toBe(false);
      expect(esPrimo("")).toBe(false);
    });
});
